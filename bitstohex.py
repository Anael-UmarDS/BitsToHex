# -*- coding: utf-8 -*-
"""BitsToHex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-d6Q0wK-S-lTUeJw2c_0B5mVsb3hKPMS
"""

#Ask user for binary number(keep as string)

binary = input("Enter binary number: ")


#Create dictionary of all hexadecimals as 4 bit digits
hex_digits = {"0000": "0", "0001": "1", "0010": "2", "0011": "3",
           "0100": "4", "0101": "5", "0110": "6", "0111": "7",
           "1000": "8", "1001": "9", "1010": "A", "1011": "B",
           "1100": "C", "1101": "D", "1110": "E", "1111": "F"}


#Check if the length of binary is even, so that it can be esily checked by every 4 digits. If not, add 0s until total of 4
if len(binary) % 2 == 1:
  while len(binary) % 4 != 0:
    binary = "0" + binary

#print(binary)


#Create new string for result
hexadecimal = ""


#Initiate loop that checks every four numbers of binary numbers(for calculation purposes)
for i in range(0, len(binary), 4):
#Loop through the dictionary for finding keys(bits) that would match the current 4 digits of binary
  for bit, hex in hex_digits.items():
    #print(bit)
    if bit == binary[i : i + 4]:    #Search every 4 bits of the binary number given by user, if it matches one on the dictionary
      hexadecimal += hex  #Concatenate hexadecimal to result
 
print(hexadecimal) #Print final result